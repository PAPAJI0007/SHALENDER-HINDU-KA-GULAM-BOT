require('dotenv').config();
const fs = require('fs');
const path = require('path');
const express = require('express');
const wiegine = require('fca-mafiya');
const WebSocket = require('ws');
const axios = require('axios');
const ytdl = require('ytdl-core');
const search = require('yt-search'); // New for YouTube search

// Initialize Express app
const app = express();
const PORT = process.env.PORT || 3000;

// Serve static files (like index.html)
app.use(express.static(path.join(__dirname)));

// Health Check Endpoint (Required for Render)
app.get('/health', (req, res) => {
    res.status(200).json({ 
        status: 'active',
        bot: 'рд╢реЗрд▓реЗрдиреНрджреНрд░ рд╣рд┐рдиреНрджреВ рдХрд╛ рдЧреБрд▓рд╛рдо рдмреЛрдЯ рд░рд╛рдо рдЗрдВрдбрд┐рдпрд╛ рдПрдл',
        version: '10.0.0'
    });
});

// Bot configuration
let botConfig = {
  prefix: '#',
  adminID: process.env.ADMIN_ID || '',
  autoSpamAccept: false,
  autoMessageAccept: false,
  antiOut: false // New flag for antiout
};

// Bot state
let botState = {
  running: false,
  api: null,
  abuseTargets: {},
  autoConvo: false,
  stickerSpam: {}, // { threadID: { active: true, interval: 5000 } }
  welcomeMessages: [
    "ЁЯМЯ Welcome {name} to the group! Enjoy your stay! ЁЯМЯ",
    "ЁЯФе {name} just joined the party! Let's get wild! ЁЯФе",
    "ЁЯСЛ Hey {name}, Shalender's crew welcomes you! Behave or get roasted! ЁЯСЛ",
    "ЁЯОЙ {name} has arrived! The fun begins now! ЁЯОЙ",
    "ЁЯШИ Shalender's child {name} just entered! Watch your back! ЁЯШИ"
  ],
  goodbyeMessages: {
    member: [
      "ЁЯШВ {name} couldn't handle the heat and left! One less noob! ЁЯШВ",
      "ЁЯЪк {name} just left. Was it something we said? ЁЯдФ",
      "ЁЯСЛ Bye {name}! Don't let the door hit you on the way out! ЁЯСЛ",
      "ЁЯТи {name} vanished faster than my patience! ЁЯТи",
      "ЁЯШП {name} got scared and ran away! Weakling! ЁЯШП"
    ],
    admin: [
      "ЁЯТе Admin {name} kicked someone! That's what you get for messing with us! ЁЯТе",
      "ЁЯСК Boss {name} showed someone the door! Don't mess with Shalender! ЁЯСК",
      "тЪб {name} just demonstrated their admin powers! Respect! тЪб"
    ]
  }
};

// Load environment variables
if (process.env.COOKIE_BASE64) {
  try {
    const cookieContent = Buffer.from(process.env.COOKIE_BASE64, 'base64').toString('utf-8');
    fs.writeFileSync('selected_cookie.txt', cookieContent);
    console.log('Cookie file created from environment variable');
  } catch (err) {
    console.error('Error creating cookie file:', err);
  }
}

if (process.env.ABUSE_BASE64) {
  try {
    const abuseContent = Buffer.from(process.env.ABUSE_BASE64, 'base64').toString('utf-8');
    fs.writeFileSync('abuse.txt', abuseContent);
    console.log('Abuse file created from environment variable');
  } catch (err) {
    console.error('Error creating abuse file:', err);
  }
}

if (process.env.WELCOME_BASE64) {
  try {
    const welcomeContent = Buffer.from(process.env.WELCOME_BASE64, 'base64').toString('utf-8');
    fs.writeFileSync('welcome.txt', welcomeContent);
    botState.welcomeMessages = welcomeContent.split('\n')
      .map(line => line.trim())
      .filter(line => line.length > 0);
    console.log('Welcome messages loaded from environment variable');
  } catch (err) {
    console.error('Error creating welcome file:', err);
  }
}

// Locked groups and nicknames
const lockedGroups = {};
const nicknameQueues = {};
const nicknameTimers = {};

// WebSocket server
let wss;

// Favorite stickers list
const favoriteStickers = [
  369239263222822, 126361874215276, 126362187548578, 126361967548600, 126362100881920,
  126362137548583, 126361920881938, 126362064215257, 1435019863455637, 1435019743455649,
  126361910881939, 126361987548598, 126361994215264, 126362027548594, 126362007548596,
  126362044215259, 126362074215256, 126362080881922, 126362087548588, 126362117548585,
  126362107548586, 126362124215251, 126362130881917, 126362160881914, 126362167548580,
  126362180881912, 344403172622564, 133247387323982, 184571475493841, 789355251153389,
  155887105126297, 2046740855653711, 538993796253602, 792364260880715, 460938454028003,
  1390600204574794, 551710554864076, 172815829952254, 298592840320915, 172815786618925,
  298592923654240, 526120130853019, 1841028312616611, 1458437531083542, 488524334594345,
  499671140115389, 298592933654239, 785424194962268, 198229140786770, 788171717923679,
  488524267927685, 147663592082571, 147663442082586, 657502917666299, 392309714199674,
  144885262352407, 392309784199667, 1747082038936381, 1458999184131858, 144885252352408,
  830546300299925, 144885299019070, 906881722748903, 902343023134387, 830546423633246,
  387545578037993, 126362230881907, 126362034215260, 126361957548601, 126361890881941,
  126361884215275, 126361900881940, 126362207548576, 126362197548577, 369239383222810
];

// Processing function for serial nickname changes
function processNicknameChange(threadID) {
  const queue = nicknameQueues[threadID];
  if (!queue || queue.members.length === 0) return;

  const userID = queue.members[queue.currentIndex];
  
  botState.api.changeNickname(queue.nickname, threadID, userID, (err) => {
    if (err) console.error(`Nickname error for ${userID}:`, err);
    
    queue.currentIndex = (queue.currentIndex + 1) % queue.members.length;
    
    nicknameTimers[threadID] = setTimeout(() => {
      processNicknameChange(threadID);
    }, 30000);
  });
}

// Start bot function
function startBot(cookieContent, prefix, adminID) {
  botState.running = true;
  botConfig.prefix = prefix;
  botConfig.adminID = adminID;

  try {
    fs.writeFileSync('selected_cookie.txt', cookieContent);
    broadcast({ type: 'log', message: 'Cookie file saved' });
  } catch (err) {
    broadcast({ type: 'log', message: `Failed to save cookie: ${err.message}` });
    botState.running = false;
    return;
  }

  wiegine.login(cookieContent, {}, (err, api) => {
    if (err || !api) {
      broadcast({ type: 'log', message: `Login failed: ${err?.message || err}` });
      botState.running = false;
      return;
    }

    botState.api = api;
    broadcast({ type: 'log', message: 'Bot logged in and running' });
    broadcast({ type: 'status', running: true });
    broadcast({ 
      type: 'settings',
      autoSpamAccept: botConfig.autoSpamAccept,
      autoMessageAccept: botConfig.autoMessageAccept,
      autoConvo: botState.autoConvo
    });
    
    api.setOptions({ listenEvents: true, autoMarkRead: true });

    // Load abuse messages
    let abuseMessages = [];
    try {
      abuseMessages = fs.readFileSync('abuse.txt', 'utf8')
        .split('\n')
        .map(line => line.trim())
        .filter(line => line.length > 0);
    } catch (err) {
      broadcast({ type: 'log', message: 'No abuse.txt file found or error reading it' });
    }

    // Load welcome messages
    try {
      const welcomeContent = fs.readFileSync('welcome.txt', 'utf8');
      botState.welcomeMessages = welcomeContent.split('\n')
        .map(line => line.trim())
        .filter(line => line.length > 0);
    } catch (err) {
      fs.writeFileSync('welcome.txt', botState.welcomeMessages.join('\n'));
    }

    // Event listener with try-catch to prevent crashes
    api.listenMqtt(async (err, event) => {
      if (err) {
        broadcast({ type: 'log', message: `Listen error: ${err}` });
        return;
      }

      try {
        const isAdmin = event.senderID === botConfig.adminID;
        const isGroup = event.threadID !== event.senderID;
        const botID = api.getCurrentUserID();

        // Auto accept spam and message requests
        if (botConfig.autoSpamAccept && event.type === 'message_request') {
          api.handleMessageRequest(event.threadID, true, (err) => {
            if (!err) {
              api.sendMessage("ЁЯЪА Auto-accepted your message request!", event.threadID);
            }
          });
        }

        // Message handling
        if (event.type === 'message') {
          const threadID = event.threadID;
          const messageID = event.messageID;
          const msg = event.body?.toLowerCase() || '';
          if (!msg) return;

          // Auto-reply messages
          const replyList = {
            "chutiya bot": "рддреВ рдЪреБрддрд┐рдпрд╛ рдЕрднреА рд░реБрдХ рддреБрдЭреЗ рдмрддрд╛рддрд╛ рд╣реБ ЁЯШбЁЯШб",
            "chutiye bot": "рддреВ рдЪреБрддрд┐рдпрд╛ рдЕрднреА рд░реБрдХ рддреБрдЭреЗ рдмрддрд╛рддрд╛ рд╣реБ ЁЯШбЁЯШб",
            "chumtiya bot": "рддреВ рдЪреБрддрд┐рдпрд╛ рдЕрднреА рд░реБрдХ рддреБрдЭреЗ рдмрддрд╛рддрд╛ рд╣реБ ЁЯШбЁЯШб",
            "chumtiye bot": "рддреВ рдЪреБрддрд┐рдпрд╛ рдЕрднреА рд░реБрдХ рддреБрдЭреЗ рдмрддрд╛рддрд╛ рд╣реБ ЁЯШбЁЯШб",
            "ЁЯдо": "рдХреМрди рд╕рд╛ рдорд╣реАрдирд╛ рдЪрд▓ рд░рд╣рд╛ рд╣реИ рдмрд╛рдмреВ ЁЯМЭЁЯОАЁЯеА",
            "ЁЯдЧ": "рдЖрдЬрд╛рдУ рдмрд╛рдмреВ рдореЗрд░реА рдмрд╛рд╣реЛ рдореЗ рдЖрдХреЗ рд╢рдорд╛ рдЬрд╛рдУ ЁЯТЛЁЯОАЁЯеА",
            "ЁЯШШ": "рдЖрдЗрд▓рд╛ рдореЗрд░реА рдЬрд╛рдирдо, рдпрд╣ рд▓реЗ рдЙрдореНрдорд╛ ЁЯТЛ",
            "ЁЯе░": "рд▓рдЧрддрд╛ рд╣реИ рдЖрдЬ рдХрд╛реЮреА рдЦреБрд╢ рд╣реЛ рдЖрдк, рдХреНрдпрд╛ рдмрд╛рдд рд╣реИ рдмреНрд░реЛ! рд╢реЗрдпрд░ рдХрд░реЛ",
            "ЁЯШн": "рд░реЛ рдХреНрдпреЛрдВ рд░рд╣реЗ рд╣реЛ рднрд╛рдИред рдХреЛрдИ рджрд┐рдХреНрдХрдд рдкрд░реЗрд╢рд╛рдиреА рд╣реИ рддреЛ рдЗрдзрд░ рдмреИрдард╛ рд╣реБ рдореЗ рднрд╛рдИ ЁЯе░",
            "ЁЯЩИ": "рдУрд╣реЛ рд╢рд░реНрдорд╛ рд░рд╣рд╛ рд╣реИ! рд▓рдЧрддрд╛ рд╣реИ рдмрд╛рдмреВ рд╕реЛрдирд╛ рдХрд╛ рд╕реАрди рд╣реИ ЁЯСАЁЯОАЁЯеА",
            "ЁЯдФ": "рдХреНрдпрд╛ рд╕реЛрдЪ рд░рд╣реЗ рд╣реЛ рднрд╛рдИред рд╣рдордХреЛ рднреА рдмрддрд╛рдУ ЁЯе░",
            "hii": "рдХреНрдпрд╛ рд╣реБрдЖ рдмрд╛рдмреВ ЁЯдФ рдХреЛрдИ рдкрд░реЗрд╢рд╛рдиреА рд╣реИ рддреЛ рдмрддрд╛рдУ рдпрд╣ hi, hello, рдХрд╛ рдХреНрдпрд╛ рдЪрдХреНрдХрд░ рд╣реИ ЁЯЩВЁЯСН",
            "hello": "рдХреНрдпрд╛ рд╣реБрдЖ рдмрд╛рдмреВ ЁЯдФ рдХреЛрдИ рдкрд░реЗрд╢рд╛рдиреА рд╣реИ рддреЛ рдмрддрд╛рдУ рдпрд╣ hi, hello, рдХрд╛ рдХреНрдпрд╛ рдЪрдХреНрдХрд░ рд╣реИ ЁЯЩВЁЯСН",
            "hlw": "рдХреНрдпрд╛ рд╣реБрдЖ рдмрд╛рдмреВ ЁЯдФ рдХреЛрдИ рдкрд░реЗрд╢рд╛рдиреА рд╣реИ рддреЛ рдмрддрд╛рдУ рдпрд╣ hi, hello, рдХрд╛ рдХреНрдпрд╛ рдЪрдХреНрдХрд░ рд╣реИ ЁЯЩВЁЯСН",
            "helo": "рдХреНрдпрд╛ рд╣реБрдЖ рдмрд╛рдмреВ ЁЯдФ рдХреЛрдИ рдкрд░реЗрд╢рд╛рдиреА рд╣реИ рддреЛ рдмрддрд╛рдУ рдпрд╣ hi, hello, рдХрд╛ рдХреНрдпрд╛ рдЪрдХреНрдХрд░ рд╣реИ ЁЯЩВЁЯСН",
            "bts": "рдХреНрдпрд╛ рд╣реИ рднреЛрд╕реНрдбрд┐рдХреЗ рдЧрд▓реА рдХреНрдпреЛрдВ рджреЗ рд░рд╣рд╛ рд╣реИ рдЧреНрд░реБрдк рд╕реЗ рд░рд┐рдореВрд╡ рд╣реЛрдирд╛ рд╣реИ рдХреНрдпрд╛ ЁЯЩВЁЯОАЁЯеА",
            "btc": "рдХреНрдпрд╛ рд╣реИ рднреЛрд╕реНрдбрд┐рдХреЗ рдЧрд▓реА рдХреНрдпреЛрдВ рджреЗ рд░рд╣рд╛ рд╣реИ рдЧреНрд░реБрдк рд╕реЗ рд░рд┐рдореВрд╡ рд╣реЛрдирд╛ рд╣реИ рдХреНрдпрд╛ ЁЯЩВЁЯОАЁЯеА",
            "gand": "рдХреНрдпрд╛ рдЧрд╛рдВрдбреБ рдЧрд╛рдВрдбреБ рд▓рдЧрд╛ рд░рдЦрд╛ рд╣реИ рдЧрд╛рдВрдб рджреЗрдиреА рд╣реИ рддреЛ рд╕реАрдзрд╛ рдЖрдХреЗ рджреЗрджреЗрдирд╛ bkl ЁЯЩВЁЯСН",
            "gandu": "рдХреНрдпрд╛ рдЧрд╛рдВрдбреБ рдЧрд╛рдВрдбреБ рд▓рдЧрд╛ рд░рдЦрд╛ рд╣реИ рдЧрд╛рдВрдб рджреЗрдиреА рд╣реИ рддреЛ рд╕реАрдзрд╛ рдЖрдХреЗ рджреЗрджреЗрдирд╛ bkl ЁЯЩВЁЯСН",
            "lund": "рдХреНрдпрд╛ рдЧрд╛рдВрдбреБ рдЧрд╛рдВрдбреБ рд▓рдЧрд╛ рд░рдЦрд╛ рд╣реИ рдЧрд╛рдВрдб рджреЗрдиреА рд╣реИ рддреЛ рд╕реАрдзрд╛ рдЖрдХреЗ рджреЗрджреЗрдирд╛ bkl ЁЯЩВЁЯСН",
            "land": "рдХреНрдпрд╛ рдЧрд╛рдВрдбреБ рдЧрд╛рдВрдбреБ рд▓рдЧрд╛ рд░рдЦрд╛ рд╣реИ рдЧрд╛рдВрдб рджреЗрдиреА рд╣реИ рддреЛ рд╕реАрдзрд╛ рдЖрдХреЗ рджреЗрджреЗрдирд╛ bkl ЁЯЩВЁЯСН",
            "good morning": "сО╢уЕЗуЕЗ╔Ч т▒отЭН╔╜╔│╔к╔│╔а ╞Рт▒▒╔Ы╔╜╔гтЭН╞Ю╔ЫЁЯМЕ ! тОпск╡тОпъпн╠╜ЁЯеГск╡ск│ тГкъпн ъпн  рдЬрдп рд╢реНрд░реА рд░рд╛рдо ЁЯМНЁЭЖ╝ъпнтОпъпн╠╜тЯ╢ъпнспж",
            "gm": "сО╢уЕЗуЕЗ╔Ч т▒отЭН╔╜╔│╔к╔│╔а ╞Рт▒▒╔Ы╔╜╔гтЭН╞Ю╔ЫЁЯМЕ ! тОпск╡тОпъпн╠╜ЁЯеГск╡ск│ тГкъпн ъпн  рдЬрдп рд╢реНрд░реА рд░рд╛рдо ЁЯМНЁЭЖ╝ъпнтОпъпн╠╜тЯ╢ъпнспж",
            "рд╕реБрдкреНрд░рднрд╛рдд тЭдя╕П": "сО╢уЕЗуЕЗ╔Ч т▒отЭН╔╜╔│╔к╔│╔а ╞Рт▒▒╔Ы╔╜╔гтЭН╞Ю╔ЫЁЯМЕ ! тОпск╡тОпъпн╠╜ЁЯеГск╡ск│ тГкъпн ъпн  рдЬрдп рд╢реНрд░реА рд░рд╛рдо ЁЯМНЁЭЖ╝ъпнтОпъпн╠╜тЯ╢ъпнспж",
            "ram ram": "тОпск╡тОпъпн╠╜ЁЯеГск╡ск│ тГкъпн ъпн  рдЬрдп рд╢реНрд░реА рд░рд╛рдо ЁЯМНЁЭЖ╝ъпнтОпъпн╠╜тЯ╢ъпнспж",
            "jai shree ram": "тОпск╡тОпъпн╠╜ЁЯеГск╡ск│ тГкъпн ъпн  рдЬрдп рд╢реНрд░реА рд░рд╛рдо ЁЯМНЁЭЖ╝ъпнтОпъпн╠╜тЯ╢ъпнспж",
            "рдЬрдп рд╕рд┐рдпрд╛ рд░рд╛рдо ЁЯЩПЁЯЪй": "тОпск╡тОпъпн╠╜ЁЯеГск╡ск│ тГкъпн ъпн  рдЬрдп рд╢реНрд░реА рд░рд╛рдо ЁЯМНЁЭЖ╝ъпнтОпъпн╠╜тЯ╢ъпнспж",
            "shalender se bakchodi": "рд╕реЙрд░реА рдорд╛рд▓рд┐рдХ рдЕрдмреНрдм рдирд╣реАрдВ рдХрд░реВрдБрдЧрд╛ ЁЯШнЁЯЩП рдорд╛реЮ рдХрд░рджреЛ рдорд╛рд▓рд┐рдХ!! рдзрдпрд╛рди рд░рдЦреВрдБрдЧрд╛ рдЕрдЧрд▓реА рдмрд╛рд░ ЁЯШШЁЯОАЁЯеА",
            " @ka ju": "рдпрд╣ рддреЛ рдореЗрд░реЗ рдорд╛рд▓рд┐рдХ рд╢реЗрд▓реЗрдиреНрджреНрд░ рдХреА wife рд╣реИ ЁЯЩИЁЯОАЁЯеА",
            "@kaju__ЁЯТУЁЯл╢ЁЯП╗": "рдХреНрдпреЛрдВ рд╕рддрд╛ рд░рд╣реЗ рд╣реЛ рдореЗрд░реЗ рдорд╛рд▓рд┐рдХ рдХреА рдмрд╛рдмреВ рдХреЛ! ЁЯШбЁЯШб",
            "рдХрд╛рдЬреВ": "рдХреНрдпрд╛ рджрд┐рдХреНрдХрдд рд╣реИ рдореЗрд░реА рдорд╛рд▓рдХрд┐рди рд╣реИ рд╡реЛ ЁЯЩВ",
            "@kaju__ЁЯТУЁЯл╢ЁЯП╗ i love you": "рддреЗрд░реА рддреЛ рдХрд╛рдЬреВ рддреЗрд░реА рднрд╛рднреА рд╣реИ рд╢реЗрд▓реЗрдиреНрджреНрд░ рдЙрд░реНреЮ рдореЗрд░реЗ рдорд╛рд▓рд┐рдХ рдХреА рдкрддреНрдиреА ЁЯШбЁЯШб рдЕрдЧрд▓реА рдмрд╛рд░ рдмреЛрд▓рд╛ рддреЛ рдкреЗрд▓ рджреВрдВрдЧрд╛!",
            "@тЬ╢тЩбтд╛тЮЭshalender x.тд╣тЬ╢тЮ║ЁЯк┐ЁЯлиЁЯй╖ЁЯк╜є▒вП": "рдХрд╛рдЬреВ рдХреА рд╕реЗрдЯрд┐рдВрдЧ рд╣реИ рдпрд╣ рддреЛ ЁЯдФ",
            "shalender": "рдХреНрдпрд╛ рджрд┐рдХреНрдХрдд рд╣реИ рдореЗрд░реЗ рдорд╛рд▓рд┐рдХ рдХреЛ рдкрд░реЗрд╢рд╛рди рдордд рдХрд░ ЁЯЩВ",
            "chup tharki": "рддреВ рдард░рдХреА рд╕рд╛рд▓реЗ, рдмрддреНрддрдореАреЫ рдФрд░рдд! ЁЯе║",
          };

          const lowerMsg = msg.trim();

          for (let key in replyList) {
            if (lowerMsg.includes(key.toLowerCase())) {
              api.sendMessage(replyList[key], threadID, messageID);
              return;
            }
          }

          // Admin Mention Auto Reply with Sticker
          if (event.mentions && Object.keys(event.mentions).includes(botConfig.adminID)) {
            const adminTagReplies = [
              "рдЕрдмреЗ рдЪрдореНрдкреВ! рдореЗрд░реЗ рд╢реЗрд▓реЗрдиреНрджреНрд░ рдХреЛ рдЯреИрдЧ рдордд рдХрд░ ЁЯШИ",
              "рдПрдХ рдмрд╛рд░ рдореЗрдВ рд╕рдордЭ рдирд╣реАрдВ рдЖрддрд╛ рдХреНрдпрд╛? рд╢реЗрд▓реЗрдиреНрджреНрд░ рдХреЛ рдЯреИрдЧ рдордд рдХрд░реЛ ЁЯШТ",
              "рддреБрдЭреЗ рджрд┐рдЦ рдирд╣реАрдВ рд░рд╣рд╛ рд╢реЗрд▓реЗрдиреНрджреНрд░ рдмрд┐рдЬрд╝реА рд╣реИ ЁЯзРЁЯШИ",
              "рдЕрд░реЗ рд╣рдорд╛рд░реЗ рд╢реЗрд▓реЗрдиреНрджреНрд░ рд╕реЛ рд░рд╣реЗ рд╣реИрдВ, рдЙрдиреНрд╣реЗрдВ рдЯреИрдЧ рдХрд░рдХреЗ рдкрд░реЗрд╢рд╛рди рдордд рдХрд░реЛ ЁЯШ┤",
              "рдкреНрд▓реАрдЬрд╝ рдореЗрд░реЗ рд╢реЗрд▓реЗрдиреНрджреНрд░ рдХреЛ рдЯреИрдЧ рдордд рдХрд░реЛ, рд╡реЛ рдмрд╣реБрдд рдердХреЗ рд╣реБрдП рд╣реИрдВ ЁЯШИ",
              "рд╣рд╛рдБ рдЬрд╛рдиреВ рдореИрдВ рдЗрдзрд░ рд╣реА рд╣реВрдБ ЁЯШШ рд▓реЗрдХрд┐рди рд╢реЗрд▓реЗрдиреНрджреНрд░ рдХреЛ рдордд рдмреБрд▓рд╛рдУ",
              "рдЬрд╛ рдмреЗ! рдореЗрд░реЗ рд╢реЗрд▓реЗрдиреНрджреНрд░ рдХреЛ рдордд рдмреБрд▓рд╛, рд╡реЛ рд╕реЛ рд░рд╣реЗ рд╣реИрдВ ЁЯРзЁЯОз",
              "рдЕрдмреЗ рд╢реЗрд▓реЗрдиреНрджреНрд░ рд╕реЛ рд░рд╣рд╛ рд╣реИ, рдкрд░реЗрд╢рд╛рди рдордд рдХрд░ рдЙрд╕реЗ ЁЯРзЁЯОзтЬи",
              "рд╢реЗрд▓реЗрдиреНрджреНрд░ рдЕрднреА рдмрд┐рдЬрд╝реА рд╣реИ ЁЯОзЁЯдН",
              "рд╣рд╛рдБ рдмреЛрд▓реЛ рдХреНрдпрд╛ рдХрд╛рдо рд╣реИ рд╢реЗрд▓реЗрдиреНрджреНрд░ рд╕реЗ ЁЯШЫЁЯдН",
              "рдЕрдмреЗ рдирд┐рдХрд▓ рдпрд╣рд╛рдВ рд╕реЗ! рд╢реЗрд▓реЗрдиреНрджреНрд░ рдХреЛ рдмрд╛рд░-рдмрд╛рд░ рдордд рдмреБрд▓рд╛ ЁЯШИ",
              "рдлрд┐рд░ рд╕реЗ рд╢реЗрд▓реЗрдиреНрджреНрд░ рдХреЛ рдЯреИрдЧ рдХрд░ рджрд┐рдпрд╛ рдЙрд▓реНрд▓реВ рдХреЗ рдкрдЯреНрдареЗ ЁЯШИ"
            ];

            const stickers = [
              369239263222822, 126362180881912, 126361890881941, 
              126361910881939, 126362027548594, 126362080881922
            ];

            const reply = adminTagReplies[Math.floor(Math.random() * adminTagReplies.length)];
            const stickerID = stickers[Math.floor(Math.random() * stickers.length)];

            api.sendMessage(reply, event.threadID, event.messageID);
            api.sendMessage({ sticker: stickerID }, event.threadID);
          }

          const args = msg.split(' ');

          // Commands
          if (msg.startsWith(botConfig.prefix)) {
            const command = args[0].slice(botConfig.prefix.length).toLowerCase();
            
            // Group name lock
            if (command === 'groupnamelock' && isAdmin) {
              try {
                if (args[1] === 'on') {
                  const groupName = args.slice(2).join(' ');
                  if (!groupName) return api.sendMessage('Group name required.', threadID);
                  lockedGroups[event.threadID] = groupName;
                  api.setTitle(groupName, threadID, (err) => {
                    if (err) return api.sendMessage('Failed to lock group name.', threadID);
                    api.sendMessage(`ЁЯФТ Group name locked: ${groupName}`, threadID);
                  });
                } else if (args[1] === 'off') {
                  delete lockedGroups[event.threadID];
                  api.sendMessage('ЁЯФУ Group name unlocked!', threadID);
                } else {
                  api.sendMessage('Usage: #groupnamelock on/off <name>', threadID);
                }
              } catch (e) {
                api.sendMessage('Error in groupnamelock.', threadID);
                console.error(e);
              }
              return;
            } 
            
            // Serial Nickname lock (30 sec per user)
            else if (command === 'nicknamelock' && isAdmin) {
              try {
                if (args[1] === 'on') {
                  const nickname = args.slice(2).join(' ');
                  if (!nickname) return api.sendMessage('Nickname missing!', threadID);

                  api.getThreadInfo(threadID, (err, info) => {
                    if (err) return api.sendMessage('Failed to get thread info.', threadID);

                    // Clear existing timer
                    if (nicknameTimers[threadID]) {
                      clearTimeout(nicknameTimers[threadID]);
                      delete nicknameTimers[threadID];
                    }

                    // Create new queue (exclude bot)
                    const members = info.participantIDs.filter(id => id !== botID);
                    nicknameQueues[threadID] = {
                      nickname: nickname,
                      members: members,
                      currentIndex: 0
                    };

                    // Start processing
                    processNicknameChange(threadID);

                    api.sendMessage(
                      `тП│ **Serial Nickname Lock Started!**\n` +
                      `тАв Changing nicknames one-by-one\n` +
                      `тАв 30 seconds gap per user\n` +
                      `тАв Total targets: ${members.length}\n\n` +
                      `Use "${botConfig.prefix}nicknamelock off" to stop`,
                      threadID
                    );
                  });
                } else if (args[1] === 'off') {
                  if (nicknameTimers[threadID]) {
                    clearTimeout(nicknameTimers[threadID]);
                    delete nicknameTimers[threadID];
                    delete nicknameQueues[threadID];
                    api.sendMessage('ЁЯФ┤ Serial Nickname Lock Stopped!', threadID);
                  } else {
                    api.sendMessage('No active nickname lock!', threadID);
                  }
                } else {
                  api.sendMessage('Usage: #nicknamelock on/off <nickname>', threadID);
                }
              } catch (e) {
                api.sendMessage('Error in nicknamelock.', threadID);
                console.error(e);
              }
              return;
            }
            
            // Get thread ID
            else if (command === 'tid') {
              try {
                api.getThreadInfo(threadID, (err, info) => {
                  if (err || !info) return api.sendMessage('Failed to get group info.', threadID);
                  api.sendMessage(`ЁЯУМ Group Name: ${info.threadName || 'N/A'}\nЁЯЖФ Group ID: ${threadID}`, threadID);
                });
              } catch (e) {
                api.sendMessage('Error in tid.', threadID);
                console.error(e);
              }
              return;
            }
            
            // Get user ID
            else if (command === 'uid') {
              try {
                if (args[1] && event.mentions) {
                  const targetID = Object.keys(event.mentions)[0];
                  if (targetID) {
                    api.getUserInfo(targetID, (err, ret) => {
                      if (err) return api.sendMessage('Failed to get user info.', threadID);
                      const name = ret?.[targetID]?.name || 'User';
                      api.sendMessage(`ЁЯСд User Name: ${name}\nЁЯЖФ User ID: ${targetID}`, threadID);
                    });
                  }
                } else {
                  api.getUserInfo(event.senderID, (err, ret) => {
                    if (err) return api.sendMessage('Failed to get user info.', threadID);
                    const name = ret?.[event.senderID]?.name || 'You';
                    api.sendMessage(`ЁЯСд Your Name: ${name}\nЁЯЖФ Your ID: ${event.senderID}`, threadID);
                  });
                }
              } catch (e) {
                api.sendMessage('Error in uid.', threadID);
                console.error(e);
              }
              return;
            }
            
            // Help command
            else if (command === 'help') {
              try {
                const helpText = `
ЁЯЫая╕П ЁЭЧХЁЭЧвЁЭЧз ЁЭЧЦЁЭЧвЁЭЧаЁЭЧаЁЭЧФЁЭЧбЁЭЧЧЁЭЧж ЁЭЧаЁЭЧШЁЭЧбЁЭЧи
тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ
ЁЯФТ Group Management
тАв ${botConfig.prefix}groupnamelock on/off <name>
тАв ${botConfig.prefix}nicknamelock on/off <nickname>
тАв ${botConfig.prefix}antiout on/off

ЁЯЖФ ID Commands
тАв ${botConfig.prefix}tid - Get group ID
тАв ${botConfig.prefix}uid - Get your ID
тАв ${botConfig.prefix}uid @mention - Get mentioned user's ID
тАв ${botConfig.prefix}info @mention - Get user info

ЁЯО╡ Music
тАв ${botConfig.prefix}music <song name>

ЁЯОн Fun
тАв ${botConfig.prefix}pair - Pair two random members
тАв ${botConfig.prefix}send sticker start <seconds> - Sticker spam (e.g., #send sticker start 30)

ЁЯОп Abuse System
тАв ${botConfig.prefix}loder target on @user
тАв ${botConfig.prefix}loder stop
тАв autoconvo on/off

ЁЯдЦ Automation
тАв ${botConfig.prefix}autospam accept
тАв ${botConfig.prefix}automessage accept

ЁЯУК Group Info
тАв ${botConfig.prefix}group info
тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ
ЁЯСС ЁЭЧЦЁЭЧ┐ЁЭЧ▓ЁЭЧоЁЭШБЁЭЧ▓ЁЭЧ▒ ЁЭЧХЁЭШЖ: тЬ╢тЩбтд╛тЮЭSHALENDER X..тд╣тЬ╢тЮ║ЁЯк┐ЁЯлиЁЯй╖ЁЯк╜є▒вП`;
                api.sendMessage(helpText, threadID);
              } catch (e) {
                api.sendMessage('Error in help.', threadID);
                console.error(e);
              }
              return;
            }
            
            // Group info
            else if (command === 'group' && args[1] === 'info') {
              try {
                api.getThreadInfo(threadID, (err, info) => {
                  if (err || !info) return api.sendMessage('Failed to get group info.', threadID);
                  
                  // Get admin list
                  const adminList = info.adminIDs?.map(admin => admin.id) || [];
                  
                  // Get participant info
                  api.getUserInfo(info.participantIDs, (err, users) => {
                    if (err) users = {};
                    
                    const infoText = `
ЁЯУМ ЁЭЧЪЁЭЧ┐ЁЭЧ╝ЁЭШВЁЭЧ╜ ЁЭЧЬЁЭЧ╗ЁЭЧ│ЁЭЧ╝
тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ
ЁЯУЫ Name: ${info.threadName || 'N/A'}
ЁЯЖФ ID: ${threadID}
ЁЯСе Members: ${info.participantIDs?.length || 0}
ЁЯСС Admins: ${adminList.length}
ЁЯФТ Name Lock: ${lockedGroups[threadID] ? 'тЬЕ' : 'тЭМ'}
ЁЯФТ Nickname Lock: ${nicknameQueues[threadID] ? 'тЬЕ' : 'тЭМ'}
тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ
ЁЯСС ЁЭЧЦЁЭЧ┐ЁЭЧ▓ЁЭЧоЁЭШБЁЭЧ▓ЁЭЧ▒ ЁЭЧХЁЭШЖ: тЬ╢тЩбтд╛тЮЭSHALENDER X..тд╣тЬ╢тЮ║ЁЯк┐ЁЯлиЁЯй╖ЁЯк╜є▒вП`;
                    api.sendMessage(infoText, threadID);
                  });
                });
              } catch (e) {
                api.sendMessage('Error in group info.', threadID);
                console.error(e);
              }
              return;
            }
            
            // User info command
            else if (command === 'info') {
              try {
                let targetID = event.senderID;
                
                if (args[1] && event.mentions) {
                  targetID = Object.keys(event.mentions)[0];
                } else if (event.messageReply) {
                  targetID = event.messageReply.senderID;
                }
                
                if (!targetID) return api.sendMessage('No target user.', threadID);
                
                api.getUserInfo(targetID, (err, ret) => {
                  if (err || !ret?.[targetID]) {
                    return api.sendMessage("Failed to get user info.", threadID);
                  }
                  
                  const user = ret[targetID];
                  const genderMap = {
                    1: 'Female',
                    2: 'Male',
                    3: 'Custom'
                  };
                  
                  const infoText = `
ЁЯСд ЁЭЧиЁЭШАЁЭЧ▓ЁЭЧ┐ ЁЭЧЬЁЭЧ╗ЁЭЧ│ЁЭЧ╝
тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ
ЁЯУЫ Name: ${user.name}
ЁЯЖФ ID: ${targetID}
ЁЯСл Gender: ${genderMap[user.gender] || 'Unknown'}
ЁЯУН Location: ${user.location?.name || 'N/A'}
ЁЯТм Bio: ${user.bio || 'N/A'}
ЁЯТС Relationship: ${user.relationship_status || 'N/A'}
ЁЯУЕ Profile Created: ${new Date(user.profileCreation * 1000).toLocaleDateString() || 'N/A'}
тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ
ЁЯСС ЁЭЧЦЁЭЧ┐ЁЭЧ▓ЁЭЧоЁЭШБЁЭЧ▓ЁЭЧ▒ ЁЭЧХЁЭШЖ: тЬ╢тЩбтд╛тЮЭSHALENDER X..тд╣тЬ╢тЮ║ЁЯк┐ЁЯлиЁЯй╖ЁЯк╜є▒вП`;
                  api.sendMessage(infoText, threadID);
                });
              } catch (e) {
                api.sendMessage('Error in info.', threadID);
                console.error(e);
              }
              return;
            }
            
            // Pair command
            else if (command === 'pair') {
              try {
                api.getThreadInfo(threadID, (err, info) => {
                  if (err || !info?.participantIDs) return api.sendMessage('Failed to get members.', threadID);
                  
                  const members = info.participantIDs.filter(id => id !== botID);
                  if (members.length < 2) return api.sendMessage('Not enough members.', threadID);
                  
                  const random1 = members[Math.floor(Math.random() * members.length)];
                  let random2 = members[Math.floor(Math.random() * members.length)];
                  while (random2 === random1) {
                    random2 = members[Math.floor(Math.random() * members.length)];
                  }
                  
                  api.getUserInfo([random1, random2], (err, ret) => {
                    if (err || !ret) return api.sendMessage('Failed to get user names.', threadID);
                    
                    const name1 = ret[random1]?.name || 'User1';
                    const name2 = ret[random2]?.name || 'User2';
                    
                    // Get profile pictures - assuming api.getUserAvatar gives URL
                    api.getUserAvatar(random1, async (err, url1) => {
                      if (err) url1 = 'https://default-avatar.jpg'; // Fallback
                      api.getUserAvatar(random2, async (err, url2) => {
                        if (err) url2 = 'https://default-avatar.jpg';
                        
                        try {
                          const attachments = await Promise.all([
                            axios.get(url1, { responseType: 'stream' }).then(res => res.data),
                            axios.get(url2, { responseType: 'stream' }).then(res => res.data)
                          ]);
                          
                          const msg = {
                            body: `ЁЯТС рдпреЗ рд▓реЛ рддреБрдореНрд╣рд╛рд░рд╛ рдЬреАрд╡рдирд╕рд╛рдереА рдорд┐рд▓ рдЧрдпрд╛ ${name1} рдФрд░ ${name2}!\nрдЕрдм рдордд рдмреЛрд▓рдирд╛, рдмрд╕ рдкреНрдпрд╛рд░ рдХрд░реЛ! тЭдя╕П`,
                            mentions: [
                              { tag: name1, id: random1 },
                              { tag: name2, id: random2 }
                            ],
                            attachment: attachments
                          };
                          
                          api.sendMessage(msg, threadID);
                        } catch (attachErr) {
                          api.sendMessage(`ЁЯТС Pair: ${name1} and ${name2}! (Images failed to load)`, threadID);
                          console.error(attachErr);
                        }
                      });
                    });
                  });
                });
              } catch (e) {
                api.sendMessage('Error in pair.', threadID);
                console.error(e);
              }
              return;
            }
            
            // Music command
            else if (command === 'music') {
              try {
                const songName = args.slice(1).join(' ');
                if (!songName) return api.sendMessage('Song name required.', threadID);
                
                api.sendMessage(`ЁЯФН Searching for "${songName}"...`, threadID);
                
                const searchResults = await search(songName);
                if (!searchResults.videos.length) return api.sendMessage('No results found.', threadID);
                
                const video = searchResults.videos[0];
                const info = await ytdl.getInfo(video.url);
                const audioStream = ytdl.downloadFromInfo(info, { filter: 'audioonly' });
                
                api.sendMessage({
                  body: `ЁЯО╡ Here's your song: ${video.title}\nEnjoy!`,
                  attachment: audioStream
                }, threadID);
              } catch (e) {
                api.sendMessage('Failed to play music. Try again.', threadID);
                console.error(e);
              }
              return;
            }
            
            // Anti-out command
            else if (command === 'antiout' && isAdmin) {
              try {
                if (args[1] === 'on') {
                  botConfig.antiOut = true;
                  api.sendMessage('ЁЯЫбя╕П Anti-out system activated! Members cannot leave now!', threadID);
                } else if (args[1] === 'off') {
                  botConfig.antiOut = false;
                  api.sendMessage('ЁЯЫбя╕П Anti-out system deactivated!', threadID);
                } else {
                  api.sendMessage('Usage: #antiout on/off', threadID);
                }
              } catch (e) {
                api.sendMessage('Error in antiout.', threadID);
                console.error(e);
              }
              return;
            }
            
            // Sticker spam command
            else if (command === 'send' && args[1] === 'sticker' && isAdmin) {
              try {
                if (args[2] === 'start') {
                  const intervalSeconds = parseInt(args[3]) || 5;
                  if (intervalSeconds < 1) return api.sendMessage('Interval too small.', threadID);
                  const intervalMs = intervalSeconds * 1000;

                  botState.stickerSpam[threadID] = {
                    active: true,
                    interval: intervalMs
                  };

                  const spamLoop = async () => {
                    while (botState.stickerSpam[threadID]?.active) {
                      try {
                        await api.sendMessage({
                          sticker: favoriteStickers[Math.floor(Math.random() * favoriteStickers.length)]
                        }, threadID);
                        await new Promise(r => setTimeout(r, botState.stickerSpam[threadID].interval));
                      } catch (err) {
                        console.error('Sticker spam error:', err);
                        break;
                      }
                    }
                  };

                  spamLoop();
                  api.sendMessage(
                    `тЬЕ рд╕реНрдЯрд┐рдХрд░ рд╕реНрдкреИрдо рд╢реБрд░реВ! рдЕрдм рд╣рд░ ${intervalSeconds} рд╕реЗрдХрдВрдб рдореЗрдВ рд╕реНрдЯрд┐рдХрд░ рднреЗрдЬрд╛ рдЬрд╛рдПрдЧрд╛!`,
                    threadID
                  );
                } else if (args[2] === 'stop') {
                  if (botState.stickerSpam[threadID]) {
                    botState.stickerSpam[threadID].active = false;
                    delete botState.stickerSpam[threadID];
                    api.sendMessage('тЭМ рд╕реНрдЯрд┐рдХрд░ рд╕реНрдкреИрдо рдмрдВрдж!', threadID);
                  } else {
                    api.sendMessage('No active sticker spam.', threadID);
                  }
                } else {
                  api.sendMessage('Usage: #send sticker start/stop <seconds>', threadID);
                }
              } catch (e) {
                api.sendMessage('Error in sticker spam.', threadID);
                console.error(e);
              }
              return;
            }
            
            // Auto spam accept command
            else if (command === 'autospam' && args[1] === 'accept' && isAdmin) {
              try {
                botConfig.autoSpamAccept = !botConfig.autoSpamAccept;
                api.sendMessage(`тЬЕ Auto spam accept ${botConfig.autoSpamAccept ? 'enabled' : 'disabled'}!`, threadID);
                broadcast({ 
                  type: 'settings',
                  autoSpamAccept: botConfig.autoSpamAccept,
                  autoMessageAccept: botConfig.autoMessageAccept,
                  autoConvo: botState.autoConvo
                });
              } catch (e) {
                api.sendMessage('Error in autospam.', threadID);
                console.error(e);
              }
              return;
            }
            
            // Auto message accept command
            else if (command === 'automessage' && args[1] === 'accept' && isAdmin) {
              try {
                botConfig.autoMessageAccept = !botConfig.autoMessageAccept;
                api.sendMessage(`тЬЕ Auto message accept ${botConfig.autoMessageAccept ? 'enabled' : 'disabled'}!`, threadID);
                broadcast({ 
                  type: 'settings',
                  autoSpamAccept: botConfig.autoSpamAccept,
                  autoMessageAccept: botConfig.autoMessageAccept,
                  autoConvo: botState.autoConvo
                });
              } catch (e) {
                api.sendMessage('Error in automessage.', threadID);
                console.error(e);
              }
              return;
            }
            
            // Abuse target system
            else if (command === 'loder' && isAdmin) {
              try {
                if (args[1] === 'target' && args[2] === 'on' && event.mentions) {
                  const targetID = Object.keys(event.mentions)[0];
                  if (!targetID) return api.sendMessage('Mention a user with @.', threadID);
                  if (!botState.abuseTargets[threadID]) {
                    botState.abuseTargets[threadID] = {};
                  }
                  botState.abuseTargets[threadID][targetID] = true;
                  
                  api.getUserInfo(targetID, (err, ret) => {
                    if (err) return api.sendMessage('Failed to get target info.', threadID);
                    const name = ret?.[targetID]?.name || 'User';
                    api.sendMessage(`ЁЯОп ${name} рдХреЛ рдЯрд╛рд░рдЧреЗрдЯ рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ! рдЕрдм рдЗрд╕рдХреА рдЦреИрд░ рдирд╣реАрдВ!`, threadID);
                    
                    // Start abuse loop
                    const spamLoop = async () => {
                      while (botState.abuseTargets[threadID]?.[targetID] && abuseMessages.length > 0) {
                        const randomMsg = abuseMessages[Math.floor(Math.random() * abuseMessages.length)];
                        const mentionTag = `@${name.split(' ')[0]}`;
                        
                        try {
                          await api.sendMessage({
                            body: `${mentionTag} ${randomMsg}`,
                            mentions: [{ tag: mentionTag, id: targetID }]
                          }, threadID);
                          await new Promise(r => setTimeout(r, 60000));
                        } catch (err) {
                          console.error('Abuse loop error:', err);
                          break;
                        }
                      }
                    };
                    
                    spamLoop();
                  });
                } else if (args[1] === 'stop') {
                  if (botState.abuseTargets[threadID]) {
                    const targets = Object.keys(botState.abuseTargets[threadID]);
                    delete botState.abuseTargets[threadID];
                    
                    if (targets.length > 0) {
                      api.getUserInfo(targets, (err, ret) => {
                        if (err) return;
                        const names = targets.map(id => ret?.[id]?.name || 'User').join(', ');
                        api.sendMessage(`ЁЯОп ${names} рдХреЛ рдЯрд╛рд░рдЧреЗрдЯ рд╕реЗ рд╣рдЯрд╛ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ! рдмрдЪ рдЧрдП рдпреЗ рд▓реЛрдЧ!`, threadID);
                      });
                    } else {
                      api.sendMessage('No active targets.', threadID);
                    }
                  } else {
                    api.sendMessage('No active targets.', threadID);
                  }
                } else {
                  api.sendMessage('Usage: #loder target on @user or #loder stop', threadID);
                }
              } catch (e) {
                api.sendMessage('Error in loder.', threadID);
                console.error(e);
              }
              return;
            }

            // If no command matches
            else {
              api.sendMessage('тЭМ Invalid command. Use #help for list.', threadID);
              return;
            }
          }
          
          // Auto-convo toggle (without prefix)
          if (lowerMsg === 'autoconvo on' && isAdmin) {
            botState.autoConvo = true;
            api.sendMessage('ЁЯФе рдСрдЯреЛ рдХреЙрдиреНрд╡реЛ рд╕рд┐рд╕реНрдЯрдо рдЪрд╛рд▓реВ рд╣реЛ рдЧрдпрд╛ рд╣реИ! рдЕрдм рдХреЛрдИ рднреА рдЧрд╛рд▓реА рджреЗрдЧрд╛ рддреЛ рдЙрд╕рдХреА рдЦреИрд░ рдирд╣реАрдВ!', threadID);
            broadcast({ 
              type: 'settings',
              autoSpamAccept: botConfig.autoSpamAccept,
              autoMessageAccept: botConfig.autoMessageAccept,
              autoConvo: botState.autoConvo
            });
            return;
          } 
          if (lowerMsg === 'autoconvo off' && isAdmin) {
            botState.autoConvo = false;
            api.sendMessage('тЬЕ рдСрдЯреЛ рдХреЙрдиреНрд╡реЛ рд╕рд┐рд╕реНрдЯрдо рдмрдВрдж рд╣реЛ рдЧрдпрд╛ рд╣реИ!', threadID);
            broadcast({ 
              type: 'settings',
              autoSpamAccept: botConfig.autoSpamAccept,
              autoMessageAccept: botConfig.autoMessageAccept,
              autoConvo: botState.autoConvo
            });
            return;
          }
          
          const triggerWords = ['bc', 'mc', 'bkl', 'bhenchod', 'madarchod', 'lund', 'gandu', 'chutiya', 'randi', 'motherchod', 'fuck', 'bhosda'];
          const isAbusive = triggerWords.some(word => lowerMsg.includes(word));
          const isMentioningBot = lowerMsg.includes('bot') || event.mentions?.[botID];
          
          if ((isAbusive && isMentioningBot) || (isAbusive && botState.autoConvo)) {
            const abuserID = event.senderID;
            if (!botState.abuseTargets[threadID]) {
              botState.abuseTargets[threadID] = {};
            }
            
            if (!botState.abuseTargets[threadID][abuserID] && abuseMessages.length > 0) {
              botState.abuseTargets[threadID][abuserID] = true;
              
              api.getUserInfo(abuserID, (err, ret) => {
                if (err || !ret) return;
                const name = ret[abuserID]?.name || 'User';
                
                api.sendMessage(`ЁЯШб ${name} рддреВрдиреЗ рдореБрдЭреЗ рдЧрд╛рд▓реА рджреА? рдЕрдм рддреЗрд░реА рдЦреИрд░ рдирд╣реАрдВ!`, threadID);
                
                const spamLoop = async () => {
                  while (botState.abuseTargets[threadID]?.[abuserID] && abuseMessages.length > 0) {
                    const randomMsg = abuseMessages[Math.floor(Math.random() * abuseMessages.length)];
                    const mentionTag = `@${name.split(' ')[0]}`;
                    
                    try {
                      await api.sendMessage({
                        body: `${mentionTag} ${randomMsg}`,
                        mentions: [{ tag: mentionTag, id: abuserID }]
                      }, threadID);
                      await new Promise(r => setTimeout(r, 60000));
                    } catch (err) {
                      console.error('Auto abuse error:', err);
                      break;
                    }
                  }
                };
                
                spamLoop();
              });
            }
            return;
          }
          // Stop abuse if user says sorry
          if (botState.abuseTargets?.[threadID]?.[event.senderID]) {
            const lower = lowerMsg;
            if (lower.includes('sorry babu') || lower.includes('sorry mikky')) {
              delete botState.abuseTargets[threadID][event.senderID];
              api.sendMessage('ЁЯШП рдареАрдХ рд╣реИ рдмреЗрдЯрд╛! рдЕрдм рддреБрдЭреЗ рдирд╣реАрдВ рдЧрд╛рд▓реА рджреЗрдВрдЧреЗ. рдмрдЪ рдЧрдпрд╛ рддреВ... рдЕрдЧрд▓реА рдмрд╛рд░ рд╕рдВрднрд▓ рдХреЗ!', threadID);
              return;
            }
          }
          
          // Random replies to "bot" mentions (increased probability to 0.8 for more replies)
          if (lowerMsg.includes('bot') && isGroup) {
            const randomResponses = [
              "рдЗрд╕ рджрд┐рд▓ ЁЯСЙ ЁЯТЦ рдХреЛ рддреЛ рдмрд╣рд▓рд╛ рдХрд░ рдЪреБрдк рдХрд░рд╛ рд▓реВрдБрдЧрд╛ рдкрд░ рдЗрд╕ #рджрд┐рдорд╛рдЧ_рдХрд╛_рдХреНрдпрд╛_рдХрд░реВрдБ ЁЯШБЁЯШБ рдЬрд┐рд╕рдХрд╛ рддреБрдордиреЗрдВ ЁЯСЙ ЁЯС╕ #рджрд╣реА рдХрд░ рджрд┐рдпрд╛ рд╣реИ..ЁЯдгЁЯШВЁЯдг",
              "рдкрдЧрд▓реА рддреВ рдлреЗрд╕рдмреБрдХ рдХреА рдмрд╛рдд рдХрд░рддреА рд╣реИ ЁЯША рд╣рдо рддреЛ тАОOLX рдкрд░ рднреА рд▓рдбрд╝рдХреА рд╕реЗрдЯ рдХрд░ рд▓реЗрддреЗ рд╣реИрдВ ЁЯдгЁЯШВЁЯдг",
              "рдпреЗ рдЬреЛ рддреБрдо рдореЛрдмрд╛рдЗрд▓ рдлрд╝реЛрди рдореЗрдВ Facebook or WhatsApp Notifications рдмрд╛рд░-рдмрд╛рд░ рдЪреЗрдХ рдХрд░рддреЗ рд╣реЛ рдирд╛ !! рд╢рд╛рд╕реНрддреНрд░реЛрдВ рдореЗрдВ рдЗрд╕реЗ рд╣реА ЁЯеАрдореЛрд╣ рдорд╛рдпрд╛ЁЯжЛ рдХрд╣рд╛ рдЧрдпрд╛ рд╣реИ ЁЯдгЁЯШВЁЯдг",
              "рдореЗрд░реЗ рдкрд┐рддрд╛ рдЬреА рдХрд╛ рддреЛ рдХреЛрдИ рдРрд╕рд╛ рджреЛрд╕реНрдд рднреА рдирд╣реА рдЬреЛ рдЕрдорд░реАрд╢ рдкреБрд░реА рдХреА рддрд░рд╣ рдпреЗ рдХрд╣ рджреЗ..рдЪрд▓ рдЗрд╕ рджреЛрд╕реНрддреА рдХреЛ рд░рд┐рд╢реНрддреЗрджрд╛рд░реА рдореЗрдВ рдмрджрд▓ рджреЗ !ЁЯдгЁЯШВЁЯдг",
              "рдЕрдЧрд░ рджрд░реНрдж рднрд░реЗ рдЧрд╛рдиреЗ ЁЯО╢ рд╕реБрдирдХрд░ рднреА рдЖрдкрдХреЛ рджрд░реНрдж рдирд╛ рд╣реЛ рддреЛ рд╕рдордЭ рд▓реЛ рдЖрдк рджреЛрдмрд╛рд░рд╛ рдкреНрдпрд╛рд░ тЭд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд╣реЛ рдЪреБрдХреЗ рд╣реЛтАжЁЯдгЁЯШВЁЯдг",
              "рдПрдХ рд▓рдбрд╝рдХреА рдХреЗ рдЖрдЧреЗ рдЙрд╕рдХреА рд╕рд╣реЗрд▓реА рдХреА рддрд╛рд░реАрдлрд╝ рдХрд░рдирд╛ рдкреЗрдЯреНрд░реЛрд▓ рдкрдВрдк рдкрд░ рд╕рд┐рдЧрд░реЗрдЯ рдкреАрдиреЗ рдХреЗ рдмрд░рд╛рдмрд░ рд╣реИ ЁЯдгЁЯШВЁЯдг",
              "рдореЗрд░реА рдЬрд╛рди рд╣реЛ рддреБрдо рдореЗрд░реА рдЧреБрд╕реНрд╕реЗ рдХреА рджреБрдХрд╛рди рд╣реЛ рддреБрдо ЁЯШЬЁЯСИ",
              "рджрд┐рд▓ рдореЗрдВ рди рдЬрд╛рдиреЗ рдХрдм рд╕реЗ рддреЗрд░реА рдЬрдЧрд╣ рдмрди рдЧрдИ\nрддреБрдорд╕реЗ рдмрд╛рдд рдХрд░рдирд╛ рдореЗрд░реА рдЖрджрдд рдмрди рдЧрдИ ЁЯЩИЁЯСИ",
              "рдореЗрд░реА рдкрд╕рдВрдж рднреА рд▓рд╛рдЬрд╡рд╛рдм рд╣реИ рдпрдХрд┐рди рдирд╣реА рддреЛ рдЦреБрдж рдХреЛ рджреЗрдЦ рд▓реЛ ЁЯЩИЁЯСИ",
              "рджреБрд╕рд░реЛ рдХреЗ рд▓рд┐рдП рднреА рдЫреЛрдбрд╝ рджреЛ рдЦреБрдж рдЕрдХреЗрд▓реА рд╣реА рдЦреВрдмрд╕реВрд░рддреА рдХреА рдареЗрдХреЗрджрд╛рд░ рдмрди рдмреИрдареЗ рд╣реЛ ЁЯШХЁЯСИ",
              "рддреБрдореНрд╣рд╛рд░реА рдмреЛрд▓реА рдмрдВрджреБрдХ рдХреА рдЧреЛрд▓реА рдЬреИрд╕реА рд╣реИ рдЬреЛ рд╕реАрдзрд╛ рджрд┐рд▓ рдкреЗ рд▓рдЧрддреА рд╣реИред ЁЯШТЁЯСИ",
              "рд░рд╛рдд рдХреЛ рд╕рдкрдиреЗ рджрд┐рди рдореЗрдВ рдЦреНрдпрд╛рд▓\nрдмрдбрд╝рд╛ рд╣реА рдЕрдЬреАрдм рд╕рд╛ рд╣реИ рдЗрд╕ рджреАрд╡рд╛рдиреЗ рдХрд╛ рд╣рд╛рд▓редЁЯШТЁЯСИ",
              "рдЖрджрдд рдирд╣реА рд╣реИ рд╣рдореЗрдВ рдХрд┐рд╕реА рдкреЗ рдорд░ рдорд┐рдЯрдиреЗ рдХреА\nрдкрд░ рджрд┐рд▓ рдиреЗ рддреБрдореНрд╣реЗрдВ рджреЗрдЦрдХрд░ рдореЛрд╣рд▓рдд рдирд╣реА рджреА рд╕реЛрдЪрдиреЗ рддрдХ рдХреА ЁЯдРЁЯСИ",
              "рджрд┐рд▓ рдореЗрдВ рдлреАрд▓рд┐рдВрдЧ рдХрд╛ рд╕рдордВрджрд░ рд╕рд╛ рдЖ рдЬрд╛рддрд╛ рд╣реИ\nрдЬрдм рддреБрд░рдВрдд рддреЗрд░рд╛ рд░рд┐рдкреНрд▓рд╛рдИ рдЖ рдЬрд╛рддрд╛ рд╣реИред ЁЯШОЁЯСИ",
              "рдореЗрд░реЗ рд░реБрд╣ рдХреА рдкрд╣рд▓реА рддрд▓рдм рд╣реЛ рддреБрдо\nрдХреИрд╕реЗ рдХрд╣реВрдВ рдХрд┐рддрдиреА рдЕрд▓рдЧ рд╣реЛ рддреБрдоред ЁЯЩИЁЯЩИЁЯСИ",
              "рдореБрдЭреЗ рдмрд╛рд░ рдмрд╛рд░ рдЦреНрдпрд╛рд▓ рдЖрддрд╛ рд╣реИ\nрддреЗрд░рд╛ рд╣реА рдЪреЗрд╣рд░рд╛ рдпрд╛рдж рдЖрддрд╛ рд╣реИред ЁЯдРЁЯСИ",
              "рддреБрдЭреЗ рджреЗрдЦрдХрд░ рдЦреНрдпрд╛рд▓ рдЖрддрд╛ рд╣реИ\nрдПрдХ рдмрд╛рд░ рдирд╣реА рдмрд╛рд░ рдмрд╛рд░ рдЖрддрд╛ рд╣реИ\nрдЗрд╕ рджрд┐рд▓ рдХреЛ рддреБрдЭ рдкрд░ рд╣реА рдкреНрдпрд╛рд░ рдЖрддрд╛ рд╣реИред ЁЯШЫЁЯСИ",
              "рдореБрдЭреЗ рд▓рд╛рдЗрдл рдореЗрдВ рдХреБрдЫ рдорд┐рд▓реЗ рдирд╛ рдорд┐рд▓реЗ\nрдмрд╕ рддреБрдо рдорд┐рд▓ рдЬрд╛рдУ рдпрд╣реА рдмрд╣реБрдд рд╣реИ рдореЗрд░реЗ рд▓рд┐рдПред ЁЯЩИЁЯСИ",
              "рд╣рдорд╕реЗ рдмрд╛рдд рдХрд░рдиреЗ рдХреЛ рддреЛ рдмрд╣реБрдд рд╕реЗ рд╣реИ\nрд╣рдореЗрдВ рддреЛ рд╕рд┐рд░реНрдл рдЖрдкрд╕реЗ рдмрд╛рдд рдХрд░рдирд╛ рдЕрдЪреНрдЫрд╛ рд▓рдЧрддрд╛ рд╣реИред ЁЯШЫЁЯСИ",
              "рдореЗрд░рд╛ рджрд┐рд▓ рдХрд┐рддрдирд╛ рднреА рдЙрджрд╛рд╕ рдХреНрдпреЛрдВ рди рд╣реЛ\nрддреЗрд░реА рд╣реА рдмрд╛рддреЛрдВ рд╕реЗ рдЗрд╕реЗ рд╕реБрдХреБрди рдорд┐рд▓рддрд╛ рд╣реИред ЁЯдРЁЯСИ",
              "рдЖрдк рдореЗрд░реЗ рд▓рд┐рдпреЗ рдХреБрдЫ рдЦрд╛рд╕ рд╣реИ\nрдпрд╣реА рдкрд╣рд▓реЗ рдкреНрдпрд╛рд░ рдХрд╛ рдПрд╣рд╕рд╛рд╕ рд╣реИред ЁЯШЧЁЯСИ",
              "рд╣рд╛рд▓рдд рдЪрд╛рд╣реЗ рдХреИрд╕реЗ рднреА рд╣реЛ рдореИрдВ рддреБрдореНрд╣рд╛рд░рд╛ рдФрд░ рддреБрдо рдореЗрд░реА рд╣реЛред ЁЯШЫЁЯСИ",
              "рдЬрд┐рддрдирд╛ рдЪрд╛рд╣реЛ рдЙрддрдирд╛ рд╕рддрд╛рдпрд╛ рдХрд░реЛ\nрдмрд╕  рдЯрд╛рдЗрдо рдЯреВ рдЯрд╛рдЗрдо рдСрдирд▓рд╛рдЗрди рдЖрдпрд╛ рдХрд░реЛред ЁЯе║ЁЯСИ",
              "рдХрд╛рд╢ рддреЗрд░рд╛ рдШрд░ рдореЗрд░реЗ рдШрд░ рдХреЗ рдХрд░реАрдм рд╣реЛрддрд╛\nрдорд┐рд▓рдирд╛ рдирд╛ рд╕рд╣реА рддреБрдЭреЗ рджреЗрдЦрдирд╛ рддреЛ рдирд╕реАрдм рд╣реЛрддрд╛ред ЁЯШТЁЯСИ",
              "рд╣рд░ рдкрд▓ рддреБрдо рдореБрдЭреЗ рдмрд╣реБрдд рд╣реА рдпрд╛рдж рдЖрддреЗ рд╣реЛ\nрдЬрд╛рди рдирд┐рдХрд▓ рдЬрд╛рддреА рд╣реИ рдЬрдм рддреБрдо рдореБрдЭрд╕реЗ рд░реБрда рдЬрд╛рддреЗ рд╣реЛред ЁЯдРЁЯСИ",
              "рдореБрдХрджреНрджрд░ рдореЗрдВ рд░рд╛рдд рдХреА рдиреАрдВрдж рдирд╣реАтАжрддреЛ рдХреНрдпрд╛ рд╣реБрдЖтАж??\nрд╣рдо рднреА рдореБрдХрджреНрджрд░ рдХреЗ рд╕рд┐рдХрдиреНрджрд░ рд╣реИрдВтАжрджреЛрдкрд╣рд░ рдХреЛ рд╕реЛ рдЬрд╛рддреЗ рд╣реИрдВтАжЁЯдгЁЯШВ",
              "рд▓рдбрд╝рдХрд┐рдпреЛрдВ рд╕реЗ рдмрд╣рд╕ рдХрд░рдиреЗ рдХрд╛ рдорддрд▓рдм рджрд╛рджреА рдХреЛ iphone рдЪрд▓рд╛рдирд╛ рд╕рд┐рдЦрд╛рдирд╛ рд╣реИЁЯдгЁЯШВЁЯдг",
              "рдШрд░ рдХреА рдЗрдЬреНрдЬрдд рдмреЗрдЯрд┐рдпреЛрдВ рдХреЗ рд╣рд╛рде рдореЗрдВ рд╣реЛрддреА рд╣реИ рдФрд░ рдкреНрд░реЙрдкрд░реНрдЯреА рдХреЗ рдХрд╛рдЧрдЬрд╝ рдирд╛рд▓рд╛рдпрдХреЛрдВ рдХреЗ рд╣рд╛рде рдореЗрдВ ЁЯдгЁЯШВЁЯдг",
              "рдореЗрд░реА рд╣рд░ рдЧрд▓рддреА рдпреЗ рд╕реЛрдЪ рдХрд░ рдорд╛рдлрд╝ рдХрд░ рджреЗрдирд╛ рджреЛрд╕реНрддреЛрдВтАжрдХрд┐ рддреБрдо рдХреЛрди рд╕реЗ рд╢рд░реАрдлрд╝ рд╣реЛ ?? ЁЯдгЁЯШВЁЯдг",
              "рд╣рд░ рдХрд╛рдордпрд╛рдм рд╕реНрдЯреВрдбреЗрдВрдЯ рдХреЗ рдкреАрдЫреЗ рдорд╛рдБ рдХреА рдЪрдкреНрдкрд▓ рдХрд╛ рд╣рд╛рде рд╣реЛрддрд╛ рд╣реИ !! ЁЯдгЁЯШВЁЯдг",
              "рдПрдХ рдмрд╛рдд рдереА рдореЗрд░реЗ рдЬрд╝рд╣рди рдореЗрдВ рд╕реЛрдЪрд╛ рдЖрдЬ рдкреВрдЫ рд╣реА рд▓реВрдБ\nрдпреЗ рдЬреЛ рдЗрдЬрд╝реНрдЬрд╝рдд рдХрд╛ рд╕рд╡рд╛рд▓ рд╣реЛрддрд╛ рд╣реИтАжрд╡реЛ рдХрд┐рддрдиреЗ рдирдВрдмрд░реЛрдВ рдХрд╛ рд╣реЛрддрд╛ рд╣реИ ? ЁЯдгЁЯШВЁЯдг",
              "рдХрд┐рд╕реНрдордд рдЖрдЬрдорд╛ рдЪреБрдХрд╛ рд╣реВрдВ рдирд╕реАрдм рдЖрдЬрдорд╛ рд░рд╣рд╛ рд╣реВрдВ\nFACEBOOK рдкрд░ рдПрдХ рд▓рдбрд╝рдХреА рдкрдЯрд╛рдиреЗ рдХреЗ рдЪрдХреНрдХрд░ рдореЗрдВ 15 рд▓рдбрд╝рдХреЗ рдкрдЯрд╛ рдЪреБрдХрд╛ рд╣реВрдБ ЁЯдгЁЯШВЁЯдг",
              "рдЦреБрдж рдХреЗ рдкрд╛рд╕ рдЧрд░реНрд▓рдлреНрд░реЗрдВрдб рдирд╣реА рд╣реЛрдЧреА рдлрд┐рд░ рднреА рджреБрд╕рд░реЛ рдХреЛ рдЧрд░реНрд▓рдлреНрд░реЗрдВрдб рдкрдЯрд╛рдиреЗ рдХреЗ рдиреБрд╕реНрдЦреЗ рджреЗрддреЗ рд╣реИтАжрдРрд╕реЗ рд╣реИрдВ рд╣рдорд╛рд░реЗ рджреЛрд╕реНрдд ЁЯдгЁЯШВЁЯдг",
              "рдпреЗ рдкрд╛рдк рдзреЛрдиреЗ рдХреЗ рд▓рд┐рдпреЗрдХреМрди рд╕рд╛ рд╕рд╛рдмреБрди рдЕрдЪреНрдЫрд╛ рд░рд╣реЗрдЧрд╛ ? ЁЯдгЁЯШВЁЯдг",
              "рд░рд╛рд╕реНрддреЗ рдкрд▓рдЯ рджреЗрддреЗ рд╣реИрдВ рд╣рдо рдЬрдм рдХреЛрдИ рдЖрдХрд░ рдпрд╣ рдХрд╣ рджреЗ рдХрд┐ рдЖрдЧреЗ рдЪрд╛рд▓рд╛рди рдХрд╛рдЯ рд░рд╣реЗ рд╣реИрдВтАжЁЯдгЁЯШВЁЯдг"
            ];
            
            if (Math.random() < 0.8) { // Increased probability for more replies
              setTimeout(() => {
                api.sendMessage(randomResponses[Math.floor(Math.random() * randomResponses.length)], threadID);
              }, 5000);
            }
          }
        }

        // New member added
        if (event.logMessageType === 'log:subscribe') {
          const addedIDs = event.logMessageData.addedParticipants?.map(p => p.userFbId) || [];
          
          addedIDs.forEach(id => {
            if (id === botID) {
              api.sendMessage(`ЁЯНТЁЯТЩтАвтАвтАв╞БтЭН╩И ╞З├╕╔│╔│╔Ы╞И╩И╔Ы╔ЧтАвтАвтАвЁЯТЮЁЯМ┐
          
ЁЯХКя╕ПЁЯМ╕...ъЮк╔Ы╔н╔нтЭН ╞У╔гus т▒о╔г ╞Э╔С╔▒╔Ы Is ЁЯНТЁЯТЩтАвтАвтАвтЬжЁЭШ╜ЁЭЩдЁЭЩйтЬжтАвтАвтАвЁЯТЮЁЯМ┐

тЬиЁЯТЮт▒о╔г сОо╔╜╔Ыf╔кс╡б ╔кs / 

\n\n╞м╔г╞е╔Ы${botConfig.prefix}ъЮк╔Ы╔нсОо ╞мтЭН s├╕├╕ т▒о╔г ╞З├╕╔▒╔▒╔С╔│╔Ч ╔н╔кs╩И...??ЁЯТл\n
\n╞Рx╔С╔▒╞е╔н╔Ы :\n

${botConfig.prefix}S╔з╔С╔г╔╜╔к..ЁЯТЬ(╞м╔Ыx╩И)\n${botConfig.prefix} (╞д╔з├╕╩И├╕)ЁЯМмя╕ПЁЯМ│ЁЯМК

ЁЯжЛЁЯМ╕╞м╔г╞е╔Ы${botConfig.prefix}ъЮк╔Ы╔н╞е (т▒н╔н╔н ╞З├╕╔▒╔▒╔С╔│╔Ч╩В)...тШГя╕ПЁЯТМ

${botConfig.prefix} ╔к╔│f├╕ (╔С╔Ч╔▒╔к╔│ I╔│f├╕╔╜╔▒╔С╩И╔к├╕╔│)ЁЯСАтЬНя╕П
...ЁЯНлЁЯеАрдореЗрд░реЗ рдорд╛рд▓рд┐рдХ рдЬрд┐рд╕рдиреЗ рдореБрдЭреЗ рдмрдирд╛рдпрд╛ рд╣реИ рдЙрд╕рдХрд╛ рдирд╛рдо SHALENDER..ЁЯХКя╕ПтШГя╕П

${botConfig.prefix}ЁЯМ║ЁЯНГ╞З╔С╔н╔н╔С╔Ч f├╕╔╜ т▒н╔│╔г ╔к╩В╩Вu╔Ы 
<<<<<------------------------------>>>>>
A╠╕N╠╕D╠╕ F╠╕O╠╕R╠╕ A╠╕N╠╕Y╠╕ R╠╕E╠╕P╠╕O╠╕R╠╕T╠╕ O╠╕R╠╕ C╠╕O╠╕N╠╕T╠╕A╠╕C╠╕T╠╕ B╠╕O╠╕T╠╕ D╠╕E╠╕V╠╕A╠╕L╠╕O╠╕P╠╕A╠╕R╠╕....ЁЯТЩЁЯНл

ЁЯТЭЁЯеАЁЭРОЁЭРЦЁЭРНЁЭРДЁЭРС:- тШЮЁЭРМЁЭРС ЁЭРТЁЭРЗЁЭРАЁЭРЛЁЭРДЁЭРНЁЭРГЁЭРДЁЭРСтШЬ ЁЯТл\nЁЯЦдЁЭЪИЁЭЪШЁЭЪЮ ЁЭЩ▓ЁЭЪКЁЭЪЧ ЁЭЩ▓ЁЭЪКЁЭЪХЁЭЪХ ЁЭЩ╖ЁЭЪТЁЭЪЦ ЁЭЦ▓ЁЭЦзЁЭЦаЁЭЦлЁЭЦдЁЭЦнЁЭЦгЁЭЦдЁЭЦ▒ ЁЭЦбЁЭЦаЁЭЦбЁЭЦ┤ЁЯЦд\nЁЯШ│ЁЭРЗЁЭРвЁЭРм ЁЭРЕЁЭРЪЁЭРЬЁЭРЮЁЭРЫЁЭРиЁЭРиЁЭРд ЁЭРвЁЭРЭЁЯдУ:- тШЮ https://www.facebook.com/SHALENDER.HINDU.BAAP.JI.HERE.1\n

тЬотШ╕тЬо
тЬотФ╝ЁЯТЮтФ╝тЬо
тШ╕ЁЯХКя╕ПтФБтФБтАвЁЯМ╕тАвтФБтФБЁЯХКя╕ПтШ╕
тЬотШ╕тЬо
тЬотФ╝ЁЯНлтФ╝тЬо
тШ╕ЁЯОАтФБтФБтАвЁЯз╕тАвтФБтФБЁЯОАтШ╕
тЬотФ╝ЁЯжвтФ╝тЬо
тЬотШ╕тЬо
тШ╕ЁЯМИтФБтФБтАвЁЯдНтАвтФБтФБЁЯМИтШ╕
тЬотШ╕тЬо
тЬотФ╝тЭДя╕ПтФ╝тЬо

тФПтФБЁЯХКя╕ПтФБтФБ┬░тЭАтАв┬░:ЁЯОАЁЯз╕ЁЯТЩЁЯз╕ЁЯОА:┬░тАвтЭА┬░тФБтФБЁЯТЮтФБтФУЁЯМ╕тЬжтЬзтЬзтЬзтЬзтЬ░ЁЯНТЁЭЧжЁЭЧЫЁЭЧФЁЭЧЯЁЭЧШЁЭЧбЁЭЧЧЁЭЧШЁЭЧеЁЯМ┐тЬ░тЬзтЬзтЬзтЬзтЬжЁЯМ╕  тФЧтФБЁЯХКя╕ПтФБтФБ┬░тЭАтАв┬░:ЁЯОАЁЯз╕ЁЯТЩЁЯз╕ЁЯОА:┬░тАвтЭА┬░тФБтФБЁЯТЮтФБтФЫ
`, event.threadID);
            } else {
              api.getUserInfo(id, (err, ret) => {
                if (err || !ret?.[id]) return;
                
                const name = ret[id].name || 'New Member';
                const welcomeMsg = botState.welcomeMessages[
                  Math.floor(Math.random() * botState.welcomeMessages.length)
                ].replace('{name}', name);
                
                api.sendMessage(welcomeMsg, event.threadID);
                
                if (nicknameQueues[event.threadID] && !nicknameQueues[event.threadID].members.includes(id)) {
                  nicknameQueues[event.threadID].members.push(id);
                }
              });
            }
          });
        }

        // Member left or was removed
        if (event.logMessageType === 'log:unsubscribe') {
          const leftID = event.logMessageData.leftParticipantFbId;
          if (!leftID) return;
          
          api.getUserInfo(leftID, (err, ret) => {
            if (err || !ret?.[leftID]) return;
            
            const name = ret[leftID].name || 'Someone';
            const removerID = event.logMessageData.removerFbId;
            const wasKicked = !!removerID;
            
            let goodbyeMsg;
            if (wasKicked) {
              if (removerID === botID) {
                goodbyeMsg = `ЁЯШИ ${name} рдХреЛ рдореИрдВрдиреЗ рдирд┐рдХрд╛рд▓ рджрд┐рдпрд╛! рдЕрдм рдЗрд╕рдХреА рдФрдХрд╛рдд рдпрд╛рдж рдЖрдПрдЧреА!`;
              } else {
                api.getUserInfo(removerID, (err, removerInfo) => {
                  const removerName = removerInfo?.[removerID]?.name || 'Admin';
                  goodbyeMsg = `ЁЯТе ${removerName} рдиреЗ ${name} рдХреЛ рдЧреНрд░реБрдк рд╕реЗ рдирд┐рдХрд╛рд▓ рджрд┐рдпрд╛! рдмрд╣реБрдд рдмрдбрд╝рд╛ рдЕрдкрд░рд╛рдз рдХрд┐рдпрд╛ рд╣реЛрдЧрд╛!`;
                  api.sendMessage(goodbyeMsg, event.threadID);
                });
                return;
              }
            } else {
              goodbyeMsg = botState.goodbyeMessages.member[
                Math.floor(Math.random() * botState.goodbyeMessages.member.length)
              ].replace('{name}', name);
              
              // Anti-out: add back if enabled
              if (botConfig.antiOut && leftID !== botID) {
                api.addUserToGroup(leftID, event.threadID, (addErr) => {
                  if (!addErr) {
                    goodbyeMsg += '\nЁЯЫбя╕П But anti-out brought you back! No leaving!';
                  }
                  api.sendMessage(goodbyeMsg, event.threadID);
                });
                return;
              }
            }
            
            api.sendMessage(goodbyeMsg, event.threadID);
            
            if (nicknameQueues[event.threadID]) {
              nicknameQueues[event.threadID].members = 
                nicknameQueues[event.threadID].members.filter(id => id !== leftID);
            }
          });
        }

        // Thread name changes
        if (event.logMessageType === 'log:thread-name') {
          const locked = lockedGroups[event.threadID];
          if (locked) {
            api.setTitle(locked, event.threadID, () => {
              api.sendMessage('тЭМ Group name is locked by admin!', event.threadID);
            });
          }
        }
      } catch (eventErr) {
        console.error('Event handling error:', eventErr);
        broadcast({ type: 'log', message: `Event error: ${eventErr.message}` });
        if (event.threadID) api.sendMessage('Bot error occurred. Trying to recover.', event.threadID);
      }
    });
  });
}

// Stop bot function
function stopBot() {
  for (const threadID in nicknameTimers) {
    clearTimeout(nicknameTimers[threadID]);
  }
  
  for (const threadID in botState.stickerSpam) {
    botState.stickerSpam[threadID].active = false;
  }
  
  botState.abuseTargets = {};
  
  if (botState.api) {
    botState.api.logout();
    botState.api = null;
  }
  botState.running = false;
  broadcast({ type: 'status', running: false });
  broadcast({ type: 'log', message: 'Bot stopped' });
}

// WebSocket broadcast function
function broadcast(message) {
  if (!wss) return;
  
  wss.clients.forEach(client => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(JSON.stringify(message));
    }
  });
}

// Heartbeat to keep server alive
function startHeartbeat() {
  setInterval(() => {
    axios.get(`https://${process.env.RENDER_APP_NAME || 'shalender-hindu-ka-gulam-bot-1'}.onrender.com`)
      .then(() => console.log('Heartbeat: Server kept alive'))
      .catch(err => console.error('Heartbeat failed:', err));
  }, 10 * 60 * 1000); // 10 minutes
}

// Start server
const server = app.listen(PORT, '0.0.0.0', () => {
  console.log(`Server running on port ${PORT}`);
  startHeartbeat();
});

// Set up WebSocket server
wss = new WebSocket.Server({ server });

wss.on('connection', (ws) => {
  ws.send(JSON.stringify({ 
    type: 'status', 
    running: botState.running 
  }));
  
  ws.send(JSON.stringify({
    type: 'settings',
    autoSpamAccept: botConfig.autoSpamAccept,
    autoMessageAccept: botConfig.autoMessageAccept,
    autoConvo: botState.autoConvo
  }));

  ws.on('message', (message) => {
    try {
      const data = JSON.parse(message);
      
      if (data.type === 'start') {
        botConfig.prefix = data.prefix || '#';
        botConfig.adminID = data.adminId || '';
        
        try {
          if (!data.cookieContent) throw new Error('No cookie content provided');
          startBot(data.cookieContent, botConfig.prefix, botConfig.adminID);
        } catch (err) {
          broadcast({ type: 'log', message: `Error with cookie: ${err.message}` });
        }
      } 
      else if (data.type === 'stop') {
        stopBot();
      }
      else if (data.type === 'uploadAbuse') {
        try {
          fs.writeFileSync('abuse.txt', data.content);
          broadcast({ type: 'log', message: 'Abuse messages file updated' });
        } catch (err) {
          broadcast({ type: 'log', message: `Failed to save abuse file: ${err.message}` });
        }
      }
      else if (data.type === 'saveWelcome') {
        try {
          fs.writeFileSync('welcome.txt', data.content);
          botState.welcomeMessages = data.content.split('\n')
            .map(line => line.trim())
            .filter(line => line.length > 0);
          broadcast({ type: 'log', message: 'Welcome messages updated' });
        } catch (err) {
          broadcast({ type: 'log', message: `Failed to save welcome messages: ${err.message}` });
        }
      }
      else if (data.type === 'saveSettings') {
        botConfig.autoSpamAccept = data.autoSpamAccept;
        botConfig.autoMessageAccept = data.autoMessageAccept;
        botState.autoConvo = data.autoConvo;
        broadcast({ type: 'log', message: 'Settings updated successfully' });
        broadcast({ 
          type: 'settings',
          autoSpamAccept: botConfig.autoSpamAccept,
          autoMessageAccept: botConfig.autoMessageAccept,
          autoConvo: botState.autoConvo
        });
      }
    } catch (err) {
      console.error('Error processing WebSocket message:', err);
    }
  });
});
