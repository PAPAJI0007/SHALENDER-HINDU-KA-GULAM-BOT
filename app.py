import asyncio
import os
import json
from fastapi import FastAPI, WebSocket, WebSocketDisconnect
import requests
from PIL import Image
import yt_dlp
from guppy import Client, Message

app = FastAPI()
loop = asyncio.get_event_loop()

class Manager:
    def __init__(self):
        self.prefix = "!"
        self.connections = set()
        self.client = None
        self.auto_spam = False
        self.auto_message = None
        self.loder_target = None
        self.auto_convo = False
        self.admin_id = None
        self.abuse_messages = []
        self.welcome_messages = [
            "üåü {name} ‡§ï‡•ã ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à! ‡§Ü‡§®‡§Ç‡§¶ ‡§≤‡•á‡§Ç! üåü",
            "üî• {name} ‡§™‡§æ‡§∞‡•ç‡§ü‡•Ä ‡§Æ‡•á‡§Ç ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•Å‡§Ü! ‡§Æ‡§ú‡§æ ‡§∂‡•Å‡§∞‡•Ç! üî•",
            "üëã ‡§π‡•á {name}, ‡§∂‡•á‡§≤‡•á‡§®‡•ç‡§¶‡•ç‡§∞ ‡§ï‡•á ‡§ï‡•ç‡§∞‡•Ç ‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à! ‡§∂‡§ø‡§∑‡•ç‡§ü ‡§∞‡§π‡•á‡§Ç ‡§µ‡§∞‡§®‡§æ ‡§≠‡•Å‡§®‡§æ ‡§¶‡§ø‡§è ‡§ú‡§æ‡§ì‡§ó‡•á! üëã",
            "üéâ {name} ‡§Ü ‡§ó‡§è! ‡§Æ‡§∏‡•ç‡§§‡•Ä ‡§∂‡•Å‡§∞‡•Ç! üéâ",
            "üòà ‡§∂‡•á‡§≤‡•á‡§®‡•ç‡§¶‡•ç‡§∞ ‡§ï‡•á ‡§¨‡§ö‡•ç‡§ö‡•á {name} ‡§®‡•á ‡§™‡•ç‡§∞‡§µ‡•á‡§∂ ‡§ï‡§ø‡§Ø‡§æ! ‡§∏‡§æ‡§µ‡§ß‡§æ‡§® ‡§∞‡§π‡•á‡§Ç! üòà"
        ]

    async def send_log(self, msg):
        print(f"[LOG] {msg}")
        for ws in list(self.connections):
            try:
                await ws.send_json({"type": "log", "message": msg})
            except Exception as e:
                self.connections.remove(ws)
                print(f"WebSocket error: {e}")

    async def send_status(self, running):
        for ws in list(self.connections):
            try:
                await ws.send_json({"type": "status", "running": running})
            except Exception as e:
                self.connections.remove(ws)
                print(f"Status send error: {e}")

    async def send_settings(self):
        for ws in list(self.connections):
            try:
                await ws.send_json({
                    "type": "settings",
                    "autoSpamAccept": self.auto_spam,
                    "autoMessageAccept": bool(self.auto_message),
                    "autoConvo": self.auto_convo
                })
            except Exception as e:
                self.connections.remove(ws)
                print(f"Settings send error: {e}")

manager = Manager()

@app.get("/")
async def root():
    return {"message": "‡§¨‡•ã‡§ü ‡§ö‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à Render ‡§™‡§∞ ‚úÖ https://shalender-hindu-ka-gulam-bot.onrender.com"}

@app.websocket("/ws")
async def websocket_endpoint(ws: WebSocket):
    await ws.accept()
    manager.connections.add(ws)
    await manager.send_log("‚úÖ WebSocket ‡§ï‡§®‡•á‡§ï‡•ç‡§ü‡•á‡§° @ shalender-hindu-ka-gulam-bot.onrender.com")
    await manager.send_status(manager.client is not None)
    await manager.send_settings()
    try:
        while True:
            data = await ws.receive_json()
            if data["type"] == "start":
                manager.prefix = data.get("prefix", "!")
                manager.admin_id = data.get("adminId")
                try:
                    session_cookies = json.loads(data["cookieContent"])
                    manager.client = Bot(session_cookies=session_cookies)
                    manager.client.listen()
                    await manager.send_log("‚úÖ ‡§¨‡•ã‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§ó‡§Ø‡§æ")
                    await manager.send_status(True)
                except json.JSONDecodeError as e:
                    await manager.send_log(f"‚ö†Ô∏è ‡§ï‡•Å‡§ï‡•Ä ‡§´‡§æ‡§á‡§≤ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {str(e)}")
            elif data["type"] == "stop":
                if manager.client:
                    manager.client.stop_listening()
                    manager.client = None
                await manager.send_log("üõë ‡§¨‡•ã‡§ü ‡§¨‡§Ç‡§¶ ‡§π‡•ã ‡§ó‡§Ø‡§æ")
                await manager.send_status(False)
            elif data["type"] == "uploadAbuse":
                manager.abuse_messages = [line.strip() for line in data["content"].splitlines() if line.strip()]
                await manager.send_log(f"‚úÖ {len(manager.abuse_messages)} ‡§Ö‡§™‡§Æ‡§æ‡§® ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§π‡•Å‡§è")
            elif data["type"] == "saveWelcome":
                manager.welcome_messages = [line.strip() for line in data["content"].splitlines() if line.strip()]
                await manager.send_log(f"‚úÖ {len(manager.welcome_messages)} ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§∏‡§π‡•á‡§ú‡•á ‡§ó‡§è")
            elif data["type"] == "saveSettings":
                manager.auto_spam = data["autoSpamAccept"]
                manager.auto_message = data["autoMessageAccept"]
                manager.auto_convo = data["autoConvo"]
                await manager.send_log("‚úÖ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§∏‡§π‡•á‡§ú‡•Ä ‡§ó‡§à‡§Ç")
                await manager.send_settings()
    except WebSocketDisconnect:
        manager.connections.remove(ws)
        await manager.send_log("‚ùå WebSocket ‡§°‡§ø‡§∏‡•ç‡§ï‡§®‡•á‡§ï‡•ç‡§ü‡•á‡§°")
    except Exception as e:
        await manager.send_log(f"‚ö†Ô∏è WebSocket ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {str(e)}")

class Bot(Client):
    def onMessage(self, author_id, message_object, thread_id, thread_type, **kwargs):
        message = message_object.text
        if message and author_id != self.uid:
            handle_message(author_id, thread_id, message, thread_type)

def send_reply(thread_id, thread_type, text):
    if manager.client:
        try:
            manager.client.send(
                Message(text=text),
                thread_id=thread_id,
                thread_type=thread_type
            )
        except Exception as e:
            print(f"Send error: {e}")

def handle_message(author_id, thread_id, message, thread_type):
    if not message.startswith(manager.prefix):
        if manager.auto_convo and author_id != manager.admin_id:
            send_reply(thread_id, thread_type, "ü§ñ ‡§ë‡§ü‡•ã ‡§ú‡§µ‡§æ‡§¨: ‡§Æ‡•à‡§Ç ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§π‡•Ç‡§Å!")
        return

    command = message[len(manager.prefix):].split()[0].lower()
    args = message[len(manager.prefix) + len(command):].strip()

    if command == "help":
        send_reply(thread_id, thread_type,
            "‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏: !help, !tid, !uid, !info, !group info, !pair, !music [url], "
            "!antiout, !send sticker [url], !autospam, !automessage [msg], "
            "!loder target [msg], !loder stop, !autoconvo, !view")
        asyncio.run_coroutine_threadsafe(manager.send_log(f"üì© {author_id} ‡§®‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§ø‡§Ø‡§æ"), loop)

    elif command == "tid":
        send_reply(thread_id, thread_type, f"‡§•‡•ç‡§∞‡•á‡§° ID: {thread_id}")

    elif command == "uid":
        send_reply(thread_id, thread_type, f"‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ID: {author_id}")

    elif command == "info":
        send_reply(thread_id, thread_type, f"‡§¨‡•ã‡§ü ‡§ö‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à ‡§™‡•ç‡§∞‡•Ä‡§´‡§ø‡§ï‡•ç‡§∏ {manager.prefix} ‡§ï‡•á ‡§∏‡§æ‡§•")

    elif command == "group" and args.startswith("info"):
        send_reply(thread_id, thread_type, f"‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä: ID {thread_id}, ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ {thread_type}")

    elif command == "pair":
        send_reply(thread_id, thread_type, "üîó ‡§™‡•á‡§Ø‡§∞‡§ø‡§Ç‡§ó ‡§∏‡§´‡§≤!")

    elif command == "music":
        if not args:
            send_reply(thread_id, thread_type, "‚ùå ‡§ï‡•É‡§™‡§Ø‡§æ YouTube URL ‡§¶‡•á‡§Ç")
            return
        send_reply(thread_id, thread_type, "üéµ ‡§∏‡§Ç‡§ó‡•Ä‡§§ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...")
        try:
            ydl_opts = {
                'format': 'bestaudio/best',
                'outtmpl': 'song.%(ext)s',
                'quiet': True,
                'noplaylist': True,
                'postprocessors': [{
                    'key': 'FFmpegExtractAudio',
                    'preferredcodec': 'mp3',
                    'preferredquality': '192',
                }],
            }
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                ydl.download([args])
            send_reply(thread_id, thread_type, "‚úÖ ‡§∏‡§Ç‡§ó‡•Ä‡§§ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§π‡•ã ‡§ó‡§Ø‡§æ (Render ‡§∏‡•Ä‡§Æ‡§æ: ‡§´‡§æ‡§á‡§≤ ‡§®‡§π‡•Ä‡§Ç ‡§≠‡•á‡§ú‡•Ä)")
            if os.path.exists("song.mp3"):
                os.remove("song.mp3")
        except Exception as e:
            send_reply(thread_id, thread_type, f"‚ùå ‡§∏‡§Ç‡§ó‡•Ä‡§§ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {e}")

    elif command == "antiout":
        send_reply(thread_id, thread_type, "üö´ ‡§è‡§Ç‡§ü‡•Ä‡§Ü‡§â‡§ü ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø (‡§°‡§Æ‡•Ä)")

    elif command == "send" and args.startswith("sticker"):
        url = args.replace("sticker", "").strip()
        if not url:
            send_reply(thread_id, thread_type, "‚ùå ‡§ï‡•É‡§™‡§Ø‡§æ ‡§õ‡§µ‡§ø URL ‡§¶‡•á‡§Ç")
            return
        send_reply(thread_id, thread_type, "üñº ‡§∏‡•ç‡§ü‡•Ä‡§ï‡§∞ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...")
        try:
            r = requests.get(url, stream=True)
            with open("sticker.jpg", "wb") as f:
                f.write(r.content)
            img = Image.open("sticker.jpg")
            img.save("sticker.webp", "WEBP")
            send_reply(thread_id, thread_type, "‚úÖ ‡§∏‡•ç‡§ü‡•Ä‡§ï‡§∞ ‡§¨‡§®‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ (Render ‡§∏‡•Ä‡§Æ‡§æ: ‡§®‡§π‡•Ä‡§Ç ‡§≠‡•á‡§ú‡§æ)")
            os.remove("sticker.jpg")
            os.remove("sticker.webp")
        except Exception as e:
            send_reply(thread_id, thread_type, f"‚ùå ‡§∏‡•ç‡§ü‡•Ä‡§ï‡§∞ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {e}")

    elif command == "autospam":
        manager.auto_spam = not manager.auto_spam
        send_reply(thread_id, thread_type, f"üîÅ ‡§ë‡§ü‡•ã‡§∏‡•ç‡§™‡•à‡§Æ {'‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø' if manager.auto_spam else '‡§®‡§ø‡§∑‡•ç‡§ï‡•ç‡§∞‡§ø‡§Ø'}")

    elif command == "automessage":
        if args:
            manager.auto_message = args
            send_reply(thread_id, thread_type, f"üí¨ ‡§ë‡§ü‡•ã‡§Æ‡•á‡§∏‡•á‡§ú ‡§∏‡•á‡§ü: {args}")
        else:
            manager.auto_message = None
            send_reply(thread_id, thread_type, "‚ùå ‡§ë‡§ü‡•ã‡§Æ‡•á‡§∏‡•á‡§ú ‡§π‡§ü‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ")

    elif command == "loder":
        if args.startswith("target"):
            manager.loder_target = args.replace("target", "").strip()
            send_reply(thread_id, thread_type, f"‚ö° ‡§≤‡•ã‡§°‡§∞ ‡§∂‡•Å‡§∞‡•Ç: {manager.loder_target}")
        elif args.startswith("stop"):
            manager.loder_target = None
            send_reply(thread_id, thread_type, "üõë ‡§≤‡•ã‡§°‡§∞ ‡§¨‡§Ç‡§¶")

    elif command == "autoconvo":
        manager.auto_convo = not manager.auto_convo
        send_reply(thread_id, thread_type, f"ü§ñ ‡§ë‡§ü‡•ã‡§ï‡•â‡§®‡•ç‡§µ‡•ã {'‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø' if manager.auto_convo else '‡§®‡§ø‡§∑‡•ç‡§ï‡•ç‡§∞‡§ø‡§Ø'}")

    elif command == "view":
        status_msg = f"‡§¨‡•ã‡§ü ‡§∏‡•ç‡§•‡§ø‡§§‡§ø:\n- ‡§ö‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à: {'‡§π‡§æ‡§Ç' if manager.client else '‡§®‡§π‡•Ä‡§Ç'}\n- ‡§ë‡§ü‡•ã‡§∏‡•ç‡§™‡•à‡§Æ: {'‡§ö‡§æ‡§≤‡•Ç' if manager.auto_spam else '‡§¨‡§Ç‡§¶'}\n- ‡§ë‡§ü‡•ã‡§ï‡•â‡§®‡•ç‡§µ‡•ã: {'‡§ö‡§æ‡§≤‡•Ç' if manager.auto_convo else '‡§¨‡§Ç‡§¶'}\n- ‡§≤‡•ã‡§°‡§∞ ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü: {manager.loder_target or '‡§ï‡•ã‡§à ‡§®‡§π‡•Ä‡§Ç'}"
        send_reply(thread_id, thread_type, status_msg)

if __name__ == "__main__":
    if os.getenv("FB_C_USER") and os.getenv("FB_XS"):
        session_cookies = {
            "c_user": os.getenv("FB_C_USER"),
            "xs": os.getenv("FB_XS")
        }
        manager.client = Bot(session_cookies=session_cookies)
        manager.client.listen()
